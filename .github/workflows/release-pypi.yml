# ---------------------------------------------------------------------------------------
#   @parent     : github workflow
#   @desc       : pypi release
#   @author     : Aetherinox
#   @url        : https://github.com/Aetherinox
# ---------------------------------------------------------------------------------------

name: "Pypi Release"

# ---------------------------------------------------------------------------------------
#   environment variables
# ---------------------------------------------------------------------------------------

env:
    ASSIGN_USER:              Aetherinox
    BOT_NAME_1:               AdminServ
    BOT_NAME_2:               AdminServX
    BOT_NAME_DEPENDABOT:      dependabot[bot]

# ---------------------------------------------------------------------------------------
#   triggers
# ---------------------------------------------------------------------------------------

on:
    workflow_dispatch:
      inputs:
        opt_build_type:
          type: choice
          description: Build Type
          options:
          - py setup.py
          - py build
        opt_pypi_type:
          type: choice
          description: Pypi Service
          options:
          - Official
          - Test

# ---------------------------------------------------------------------------------------
#   jobs
# ---------------------------------------------------------------------------------------

jobs:
  build:
    name: Prepare Package
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.get_package_version.outputs.PACKAGE_VERSION }}
    steps:
      - name: ‚úÖ Start
        run: | 
              echo "Starting build: ${{ github.event.inputs.opt_build_type }}" / ${{ inputs.opt_build_type }}

      - name: ‚òëÔ∏è Checkout
        uses: actions/checkout@v4

      - name: Get Package Version
        id: get_package_version
        run: |
          VER=$(cat VERSION)
          echo "PACKAGE_VERSION=$VER" >> $GITHUB_OUTPUT

      - name: Print Package Version
        id: print_package_version
        run: |
          echo ${{ needs.build.outputs.PACKAGE_VERSION }}
          echo ${{ env.PACKAGE_VERSION }}

      # ---------------------------------------------------------------------------------------
      #   setup python
      # ---------------------------------------------------------------------------------------

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # ---------------------------------------------------------------------------------------
      #   install pip, setuptools, wheel, twine, etc
      # ---------------------------------------------------------------------------------------

      - name: üêç Install Build Tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine build

      # ---------------------------------------------------------------------------------------
      #   build python script
      # ---------------------------------------------------------------------------------------

      - name: ‚ò∏Ô∏è Build tarball
        run: |
          if [ "${{ github.event.inputs.opt_build_type }}" = "py setup.py" ]; then
            echo "Starting build: py setup.py"
            python setup.py sdist
          fi

          if [ "${{ github.event.inputs.opt_build_type }}" = "py build" ]; then
            echo "Starting build: py build"
            python -m build . --sdist
          fi

      - name: "ü™¢ Twine ‚Ä∫ Check Dist"
        run: |
          twine check dist/*
  
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

# ---------------------------------------------------------------------------------------
#   Pypi: Official Stable Release
# ---------------------------------------------------------------------------------------

  pypi-publish-official:
    name: >-
      üì¶ PyPI ‚Ä∫ Official
    if: ${{ github.event.inputs.opt_pypi_type == 'Official' }}
    needs:
    - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    environment:
      name: Orion
      url: https://pypi.org/p/mkdocs-link-embeds-plugin

    steps:
    - name: "Download ‚Ä∫ Saved Artifacts"
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
  
  #  - name: Release üì¶ PyPI Official
   #   uses: pypa/gh-action-pypi-publish@release/v1
  #    with:
   #     user: __token__
   #     #password: ${{ secrets.PYPI_API_TOKEN }}
   #     packages-dir: dist/
    #    print-hash: true

# ---------------------------------------------------------------------------------------
#   Pypi: Test API
# ---------------------------------------------------------------------------------------

  pypi-publish-test:
    name: >-
      üì¶ PyPI ‚Ä∫ Test Api
    if: ${{ github.event.inputs.opt_pypi_type == 'Test' }}
    needs:
    - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    environment:
      name: Orion
      url: https://test.pypi.org/p/mkdocs-link-embeds-plugin

    steps:
    - name: "Download ‚Ä∫ Saved Artifacts"
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    #- name: Release üì¶ PyPI Test
    #  uses: pypa/gh-action-pypi-publish@release/v1
     # with:
     #   repository-url: https://test.pypi.org/legacy/

  dist-release:
    name: >-
      üì¶ Github ‚Ä∫ Release
    runs-on: ubuntu-latest
    needs: [ build, pypi-publish-official, pypi-publish-test ]
    env:
      PACKAGE_VERSION: ${{ needs.build.outputs.package_version }}
    if: |
      always()
      && contains(needs.*.result, 'success')
      && !contains(needs.*.result, 'failure')
    permissions:
      contents: write
    steps:

      # ---------------------------------------------------------------------------------------
      #   [ Debug ]: Get Env Variables
      # ---------------------------------------------------------------------------------------

      - name: üêç Get Variables
        run: |
          echo ${{ env.PACKAGE_VERSION }}

      # ---------------------------------------------------------------------------------------
      #   Checkout
      # ---------------------------------------------------------------------------------------

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      steps:
      - name: "Download ‚Ä∫ Saved Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/


      # ---------------------------------------------------------------------------------------
      #   [ Tag ]: Pre Create
      # ---------------------------------------------------------------------------------------

      - name: "üîñ [ Tag ]: Pre Create ${{ env.PACKAGE_VERSION }}"
        uses: rickstaa/action-create-tag@v1
        id: "tag_create"
        with:
          tag: ${{ env.PACKAGE_VERSION }}
          tag_exists_error: false
          message: "Latest release"

      - name: "üîñ [ Tag ]: Confirm ${{ env.PACKAGE_VERSION }}"
        run: |
          echo "Tag already present: ${{ env.TAG_EXISTS }}"
          echo "Tag already present: ${{ steps.tag_create.outputs.tag_exists }}"
